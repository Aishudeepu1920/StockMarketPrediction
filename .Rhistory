legend("topleft", c("Actual Stock","Training Data","Predicted Future Stock"), fill=c(color1,color2,color3))
#Phase Space Reconstruction using LAG
train =  phaseSpaceReconstruction(data)
#Obtain all the dates and store it so it can be plotted.
#Example x_axis = [2017-04-11, 2017-04-10...]
x_axis = as.numeric(rownames(train))
#Plot only training data
plotData(x_axis[TRN_RANGE],train$y[TRN_RANGE],color=color2)
#WIND is the window. This window moves as the number of days advance
#The logic has been explained in the Phase Space Reconstruction and paper
wind = train[TRN_RANGE,]
#Create empty vectors where values are stored when the window is moved.
#Once the window has reached the end, all values inside these vectors are used to plot the graph. Basically, all results and details are stored in these
r_day = vector(mode="numeric",length = 0L) #Vector of Dates [2017-04-11]
r_pprice = vector(mode="numeric",length = 0L) #Predicted Prices
r_aprice = vector(mode="numeric",length = 0L) #Actual Prices
results = data.frame(r_day,r_aprice,r_pprice) #Data frame of the above
accuracy = vector(mode="numeric",length = 0L) #Accuracy of each prediction
#This vector is used in the end of obtain the overall accuracy or mean accuracy
avg_perform = vector(mode="numeric",length = 0L)
space = c(1,10,30,60,90)
range = list(c(1:1),c(2:10),c(11:30),c(31:60),c(61:90))
i = 1
#Print the header
cat("DAY","\t","DATE","\t\t","PREDICTED PRICE","\n")
cat("----------------------------------------","\n")
#For each day, train the data and predict the result.
#The predicted value of each day is fed as training data to the next day
for (day in 1:DELAY) {
#Prepare and store the training model
model = lsSVM(y ~ x,wind,max_gamma=3125,min_lambda=8e-06)
X = train$x[CUR + day]          #Get training data within WINDOW
X_axisname = x_axis[CUR + day]  #Get all dates in string
A = train$y[CUR + day]          #Get actual prices
#Predict prices given X
pred = as.numeric(test(model,X))
#Store results in future dataframe
results[nrow(results) + 1,] = c(X_axisname,A,pred)
#Once we have predicted stock for DAY 1, we add it to the training set. When we do this, the oldest value of the training set is removed. Basically, we are adding a row and removing the oldest. This is the "Sliding-Window". It acts like a QUEUE. Last in, First Out
#Remove first row from the window
wind = wind[-1,]
#Add predicted price to last row
wind[length(wind[,1]) +1,] = c(X,pred)
#Rownames represet the DATE, so we need to append the appropriate date to each row.
#Get first row number
first = as.numeric(rownames(wind[1,]))
#Last row number will be.... (first + W_SIZE)
last = first + W_SIZE
#rownames start from first:last
#Example 20:200 represents stock from 20th to 200th day in the stock data
rownames(wind) = c(first:last)
#Convert the date from string to DATE format
date = as.character(data[X_axisname,1])
#Output the results on console, (DAY, DATE, PRED_PRICE)
cat("Day",day,"\t",date,"\t",pred,"\n")
#Calculate accuracy by dividing actual and predicted and multiply by 100 to show in percentage.
acc = A/pred
if(acc>1)
acc = (pred/A) * 100
else
acc = acc * 100
#Store accuracy in the empty vector we defined earlier
accuracy[length(accuracy) +1] = acc
if(day %in% space)
{
n = length(accuracy)
#Calculate percentage decline
avg_perform[length(accuracy) +1] = mean(accuracy[range[[i]]])
i = i+1
}
}
#Plot the predicted results
plotData(results$r_day,results$r_pprice,color = color3)
A = results$r_aprice
P = results$r_pprice
#Calculate average of all accuracy
avg_perform = na.omit(avg_perform)
mean_acc = perc(mean(avg_perform),TRUE)
#Calculate R-squared
r_squared = getAcc(P,A)
#Display results on graph as a legend
par(font=2)
legend('bottomright',c(paste("Accuracy ",mean_acc)))
#The steps that follow are basically for those who wish to see summary of results after the prediction is done
date = as.character(data[results$r_day,1])
results = data.frame(date,A,P)
colnames(results) = c("Date","Actual","Predicted")
plotAcc = function()
{
plot(accuracy,type='l',col='gray',lwd=2,main="Daywise Accuracy",xlab = "No. of days ahead",ylab = "Accuracy %")
ac = sort(accuracy,decreasing = TRUE)
lines(ac,type='l',col='red',lwd=2)
legend("bottomleft", c("Accuracy","Net Accuracy  "), fill=c('gray','red'))
}
plotPredAcc = function()
{
plot(avg_perform,type='l',col='red',lwd=2,main="Predictive Performance",xlab = "No. of days ahead",ylab = "Accuracy %",ylim = c((min(avg_perform)-5),100))
}
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
#Started: 14th April 2018     Completed: 19th April 2018#
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('Quandl')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('liquidSVM')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('R2')
caret::R2
install.packages('caret')
library(caret)
getAcc = function(predicted,actual)
{
#Returns the R-Squared value
return(round(R2(predicted,actual),3))
}
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotAcc()
plotPredAcc()
plotAcc()
par(mfrow=c(2,1))
plotAcc()
plotPredAcc()
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
par(mfrow=c(2,1))
plotPredAcc()
plotAcc()
par(mfrow=c(2,1))
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
plotBoth() = function()
{
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
}
plotBoth = function()
{
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
}
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
plotBoth()
plotAcc()
plotPredAcc()
plotPredAcc()
plotAcc()
plotBoth()
plotBoth = function()
{
par(mfrow=c(1,2))
plotAcc()
plotPredAcc()
par(mfrow=c(1,1))
}
my_summary()
plotBoth()
plotAcc()
plotPredAcc()
plotBoth()
install.packages('rvest')
library(rvest)
url = "http://www.math.utah.edu/~alfeld/math/largeprime.html"
data = read_html(url)
head(head)
head(data)
head
data
length(data)
str(data)
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
summary()
my_summary()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Average Predictive Performance",xlim = as.character(c(1,5)),ylim = c(80,100))
}
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Average Predictive Performance",xlim = c(1,5),ylim = c(80,100))
axis(1, at=1:10, labels=letters[1:10])
}
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
pav()
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
}
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
legend('bottomleft',"Accuracy",fill = 'red')
}
pavg()
source('D:/GitHub/StockMarketPrediction/perform.R')
pavg()
pavg = function()
{
plot(c(1:5),c(one,ten,thirty,sixty,ninety),type='b',col=C[1],lwd=thick,pch=x,xlab = "Range in days",ylab = "Accuracy %",main="Overall Performance",xlim = c(1,5),ylim = c(80,100),xaxt="n")
axis(1, at=1:5, labels=c("1","10","30","60","90"))
legend('bottomleft',"Accuracy  ",fill = 'red')
with(LifeCycleSavings[1:9,], text(sr~dpi, labels = row.names(LifeCycleSavings[1:9,]), pos = 4))
}
pavg()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
results
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
plotAcc()
plotPredAcc()
source('D:/GitHub/StockMarketPrediction/perform.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
prredBoth()
predBoth()
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plot(Both)
plotBoth()
plotAcc()
plotPredAcc()
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
pavg()
pall()
pavg()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth
my_summary()
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/perform.R')
pall()
source('D:/GitHub/StockMarketPrediction/vaishu.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
#Plotting all data
qplot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
?qplot
#Plotting all data
ggplot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
library(ggplot2)
#Plotting all data
ggplot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
ggplot(data$Close,type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
libarry(plotly)
install.packages('plotly')
library(plotly)
#Plotting all data
plot_ly(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
plot_ly(data$Close,type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
plot_ly(data,type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
#Plotting all data
plot_ly(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2",mode='lines')
plot(ts(data$Close),type="l",xlab = paste(substr(START_DATE,0,4)," to ",substr(END_DATE,0,4)),ylab = "Closing Price",main=paste(COMPANY," Stock Prediction",sep=""),col=color1,lwd="2")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('liquidSVM',configure.args="native C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin\",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
remove.packages('liquidSVM')
library(liquidSVM)
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/", repos = "http://www.isa.uni-stuttgart.de/software/R")
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
library(liquidSVM)
remove.packages('liquidSVM')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/",
repos="http://www.isa.uni-stuttgart.de/software/R")
library(liquidSVM)
remove.packages('liquidSVM')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0/bin/")
library(liquidSVM)
?lsSVM
source('D:/GitHub/StockMarketPrediction/achyutha.R')
vignette('demo',package='liquidSVM')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
library(liquidSVM)
remove.packages('liquidSVM')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
install.packages("liquidSVM", configure.args = "native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
install.packages('liquidSVM',configure.args="native C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/")
library("liquidSVM", lib.loc="~/R/win-library/3.5")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
library("liquidSVM", lib.loc="~/R/win-library/3.5")
source('D:/GitHub/StockMarketPrediction/achyutha.R')
unlink('liquidSVM')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
Sys.time()
Sys.time() - Sys.time()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
y
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
res = end-start
res
str(res)
as.character(res)
res$difftime
res$units
res
print(res)
res = end - start
cat("\t","Execution Time","\t",print(res),"\n")
cat("\t","Execution Time","\t",print(res),"\n")
res
cat("\t","Execution Time","\t", res,"\n")
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
res = end - start
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
res = end - start
cat("\t")
print(res)
cat("\t","No. of days predicte
res = end - start
cat("\t")
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
res = end - start
cat("\t")
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
my_summary = function()
{
cat("\n","--------------------------------Prediction Summary-------------------------------","\n\n")
cat("BASIC STATS","\n")
res = end - start
cat("\t ")
print(res)
cat("\t","No. of days predicted","\t",DELAY,"\n")
cat("\t","Training data (days)","\t",length(TRN_RANGE),"\n")
cat("\t","Max. pred. accuracy","\t",perc(max(accuracy),TRUE),"\n")
cat("\t","Min. pred. accuracy","\t",perc(min(accuracy),TRUE),"\n")
cat("\t","Mean pred. accuracy","\t",perc(mean(accuracy),TRUE),"\n")
cat("\t","Predictive Accuracy","\t",mean_acc,"\n\n")
cat("FUNCTIONS","\n")
cat("\t","plotBoth()","\t","To plot both performance curves","\n")
cat("\t","plotAcc()","\t","To plot the accuracy curve","\n")
cat("\t","plotPredAcc()","\t","To plot the predictive accuracy curve","\n\n")
cat("VECTORS","\n")
cat("\t","results","\t\t","To print entire results: day,actual,predicted","\n")
cat("\t","accuracy","\t\t","To print daywise accuracy","\n")
cat("\t","avg_perform","\t\t","To print predictive accuracy","\n")
}
my_summary()
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
source('D:/GitHub/StockMarketPrediction/achyutha.R')
plotBoth()
